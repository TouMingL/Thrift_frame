/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_ping_H
#define test_ping_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "test_ping_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class test_pingIf {
 public:
  virtual ~test_pingIf() {}
  virtual void ping(std::string& _return, const std::string& str1) = 0;
  virtual void output(std::string& _return, const std::string& msg) = 0;
};

class test_pingIfFactory {
 public:
  typedef test_pingIf Handler;

  virtual ~test_pingIfFactory() {}

  virtual test_pingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(test_pingIf* /* handler */) = 0;
  };

class test_pingIfSingletonFactory : virtual public test_pingIfFactory {
 public:
  test_pingIfSingletonFactory(const ::std::shared_ptr<test_pingIf>& iface) : iface_(iface) {}
  virtual ~test_pingIfSingletonFactory() {}

  virtual test_pingIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(test_pingIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<test_pingIf> iface_;
};

class test_pingNull : virtual public test_pingIf {
 public:
  virtual ~test_pingNull() {}
  void ping(std::string& /* _return */, const std::string& /* str1 */) override {
    return;
  }
  void output(std::string& /* _return */, const std::string& /* msg */) override {
    return;
  }
};

typedef struct _test_ping_ping_args__isset {
  _test_ping_ping_args__isset() : str1(false) {}
  bool str1 :1;
} _test_ping_ping_args__isset;

class test_ping_ping_args {
 public:

  test_ping_ping_args(const test_ping_ping_args&);
  test_ping_ping_args& operator=(const test_ping_ping_args&);
  test_ping_ping_args() noexcept;

  virtual ~test_ping_ping_args() noexcept;
  std::string str1;

  _test_ping_ping_args__isset __isset;

  void __set_str1(const std::string& val);

  bool operator == (const test_ping_ping_args & rhs) const;
  bool operator != (const test_ping_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const test_ping_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class test_ping_ping_pargs {
 public:


  virtual ~test_ping_ping_pargs() noexcept;
  const std::string* str1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _test_ping_ping_result__isset {
  _test_ping_ping_result__isset() : success(false) {}
  bool success :1;
} _test_ping_ping_result__isset;

class test_ping_ping_result {
 public:

  test_ping_ping_result(const test_ping_ping_result&);
  test_ping_ping_result& operator=(const test_ping_ping_result&);
  test_ping_ping_result() noexcept;

  virtual ~test_ping_ping_result() noexcept;
  std::string success;

  _test_ping_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const test_ping_ping_result & rhs) const;
  bool operator != (const test_ping_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const test_ping_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _test_ping_ping_presult__isset {
  _test_ping_ping_presult__isset() : success(false) {}
  bool success :1;
} _test_ping_ping_presult__isset;

class test_ping_ping_presult {
 public:


  virtual ~test_ping_ping_presult() noexcept;
  std::string* success;

  _test_ping_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _test_ping_output_args__isset {
  _test_ping_output_args__isset() : msg(false) {}
  bool msg :1;
} _test_ping_output_args__isset;

class test_ping_output_args {
 public:

  test_ping_output_args(const test_ping_output_args&);
  test_ping_output_args& operator=(const test_ping_output_args&);
  test_ping_output_args() noexcept;

  virtual ~test_ping_output_args() noexcept;
  std::string msg;

  _test_ping_output_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const test_ping_output_args & rhs) const;
  bool operator != (const test_ping_output_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const test_ping_output_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class test_ping_output_pargs {
 public:


  virtual ~test_ping_output_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _test_ping_output_result__isset {
  _test_ping_output_result__isset() : success(false) {}
  bool success :1;
} _test_ping_output_result__isset;

class test_ping_output_result {
 public:

  test_ping_output_result(const test_ping_output_result&);
  test_ping_output_result& operator=(const test_ping_output_result&);
  test_ping_output_result() noexcept;

  virtual ~test_ping_output_result() noexcept;
  std::string success;

  _test_ping_output_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const test_ping_output_result & rhs) const;
  bool operator != (const test_ping_output_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const test_ping_output_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _test_ping_output_presult__isset {
  _test_ping_output_presult__isset() : success(false) {}
  bool success :1;
} _test_ping_output_presult__isset;

class test_ping_output_presult {
 public:


  virtual ~test_ping_output_presult() noexcept;
  std::string* success;

  _test_ping_output_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class test_pingClient : virtual public test_pingIf {
 public:
  test_pingClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  test_pingClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& str1) override;
  void send_ping(const std::string& str1);
  void recv_ping(std::string& _return);
  void output(std::string& _return, const std::string& msg) override;
  void send_output(const std::string& msg);
  void recv_output(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class test_pingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<test_pingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (test_pingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_output(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  test_pingProcessor(::std::shared_ptr<test_pingIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &test_pingProcessor::process_ping;
    processMap_["output"] = &test_pingProcessor::process_output;
  }

  virtual ~test_pingProcessor() {}
};

class test_pingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  test_pingProcessorFactory(const ::std::shared_ptr< test_pingIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< test_pingIfFactory > handlerFactory_;
};

class test_pingMultiface : virtual public test_pingIf {
 public:
  test_pingMultiface(std::vector<std::shared_ptr<test_pingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~test_pingMultiface() {}
 protected:
  std::vector<std::shared_ptr<test_pingIf> > ifaces_;
  test_pingMultiface() {}
  void add(::std::shared_ptr<test_pingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const std::string& str1) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, str1);
    }
    ifaces_[i]->ping(_return, str1);
    return;
  }

  void output(std::string& _return, const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->output(_return, msg);
    }
    ifaces_[i]->output(_return, msg);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class test_pingConcurrentClient : virtual public test_pingIf {
 public:
  test_pingConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  test_pingConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& str1) override;
  int32_t send_ping(const std::string& str1);
  void recv_ping(std::string& _return, const int32_t seqid);
  void output(std::string& _return, const std::string& msg) override;
  int32_t send_output(const std::string& msg);
  void recv_output(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
