// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "test_ping.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class test_pingHandler : virtual public test_pingIf {
 public:
  test_pingHandler() {
    // Your initialization goes here
  }

   void ping(std::string &_return, const std::string &msg) override
  {
    // 获取当前时间戳
    auto now = std::chrono::system_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(now.time_since_epoch()).count();

    // 将时间戳附加到返回字符串中
    std::ostringstream oss;
    oss << msg << " - Timestamp: " << duration;
    _return = oss.str();

    printf("%s\n", _return.c_str());
  }

  void output(std::string &_return, const std::string &msg) override
  {
    // 简单地返回消息
    _return = "You said: " + msg;
    printf("%s\n", _return.c_str());
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  std::shared_ptr<test_pingHandler> handler(new test_pingHandler());
  std::shared_ptr<TProcessor> processor(new test_pingProcessor(handler));
  std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  std::shared_ptr<TProtocolFactory> protocolFactory(new TCompactProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

